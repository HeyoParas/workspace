#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
#include <windows.h>

#define HEIGHT 40
#define WIDTH 20

int x, y, fruitX, fruitY, score, gameover, count, level;
int tailX[100],tailY[100];
int countTail;

void draw()
{
    int i, j,k;
    system("cls");
    for (i = 0; i < WIDTH; i++)
    {
        for (j = 0; j < HEIGHT; j++)
        {
            if (i == 0 || j == 0 || i == WIDTH - 1 || j == HEIGHT - 1)
            {
                printf("#");
            }
            else
            {
                if (i == x && j == y)
                {
                    printf("O");
                }
                else if (i == fruitX && j == fruitY)
                {
                    printf("@");
                }
                else
                {
                    int x=0;
                    for(k=0;k<countTail;k++)
                    {
                        if(i==tailX[k] && j==tailY[k])
                        {
                            printf("o");
                            x=1;
                        }
                    }
                    if(x==0)
                    printf(" ");
                    
                }
            }
        }
        printf("\n");
    }
    printf("level: %d\n", level);
    printf("score: %d\n", score);
    printf("FOR EXIT THE GAME ANY TIME PRESS P KEY");
}

void setup()
{
    x = WIDTH / 2;
    y = HEIGHT / 2;

    do
    {
    fruitX = rand() % WIDTH;
    } while (fruitX == 0);

    do
    {
    fruitY = rand() % HEIGHT;
    } while (fruitY == 0);

    score = 0;
    gameover = 0;
    level = 1;
}

void input()
{
    if (kbhit())
    {
        switch (getch())
        {
        case 'a':
            count = 1;
            break;
        case 's':
            count = 2;
            break;
        case 'w':
            count = 3; 
            break;
        case 'd':
            count = 4; 
            break;
        case 'p':
            gameover = 1; 
            break;
        }
    }
}

void logic()
{
    int prevX=tailX[0];
    int prevY=tailY[0];
    int prev2X,prev2Y;
    int i;
    tailX[0]=x;
    tailY[0]=y;

    for(i=1;i<countTail;i++)
    {
        prev2X=tailX[i];
        prev2Y=tailY[i];
        tailX[i]=prevX;
        tailY[i]=prevY;
        prevX=prev2X;
        prevY=prev2Y;
    }
    switch (count)
    {
    case 1:
        y--; 
        break;
    case 2:
        x++; 
        break;
    case 3:
        x--;
        break;
    case 4:
        y++;
        break;
    }
    if(score==10)
    {
        level=2;
    }
    if (level==1 && score<10)
    {
        if (x == 0)
            x = WIDTH - 1;
        else if (x == WIDTH - 1)
            x = 1;
        else if (y == 0)
            y = HEIGHT - 1;
        else if (y == HEIGHT - 1)
            y = 1;
    }
    if ((x == 0 || x == WIDTH || y == 0 || y == HEIGHT) && level==2)
    {
        gameover = 1;
    }
    for(i=0;i<countTail;i++)
    {
       if(x==tailX[i] && y==tailY[i])
       {
        gameover=1;
       }
    }

    if (x == fruitX && y == fruitY)
    {
        do
        {
            fruitX = rand() % WIDTH;
        } while (fruitX == 0);

        do
        {
            fruitY = rand() % HEIGHT;
        } while (fruitY == 0);

        score+=2;
        countTail++;
    }
}

int main()
{
    setup();
    while (!gameover)
    {
        draw();
        input();
        logic();
        Sleep(10);
    }
    return 0;
}
